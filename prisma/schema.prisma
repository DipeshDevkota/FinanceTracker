datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") // Will use the DATABASE_URL from .env
}

generator client {
  provider = "prisma-client-js"
}

model Post {
  id        Int      @id @default(autoincrement()) // Auto incrementing ID
  title     String
  content   String
  createdAt DateTime @default(now()) // Automatically set the creation timestamp
  authorId  Int // Foreign key to User
  author    User     @relation(fields: [authorId], references: [id]) // One-to-many relationship
}

model User {
  id         Int      @id @default(autoincrement())
  profilePic String?
  password   String   // ‚ùó Remove default for security
  username   String   @unique
  email      String   @unique
  budget     Budget[]
  posts      Post[]
}

model Transaction {
  id                Int       @id @default(autoincrement())
  price             Float     // Changed from String
  quantity          Int
  brand             String?
  name              String
  dateOfManufacture DateTime? // Changed from String
  dateOfExpiry      DateTime?
  description       String?   // Fixed type
  transactionPic    String?   // camelCase
  category          Category  // enum + lowercase
  budgetId          Int
  budget            Budget    @relation(fields: [budgetId], references: [id])
}

model Budget {
  id               Int               @id @default(autoincrement())
  user             User              @relation(fields: [userId], references: [id])
  userId           Int
  transactions     Transaction[]
  allocations      BudgetAllocation[] // PascalCase
}

enum Category {
  Food 
  Electronics
  Fashion
  Healthcare
  Others
}

model BudgetAllocation {  // PascalCase
  id               Int         @id @default(autoincrement())
  amount           Float    
  category         Category    // Use enum
  budget           Budget      @relation(fields: [budgetId], references: [id])
  budgetId         Int
  period           String      // Consider DateTime for start/end dates
  notes            String?
  adjustments      BudgetAdjustment[] // Consolidated
}

model BudgetAdjustment {  // Consolidated model
  id               Int         @id @default(autoincrement())
  type             String      // "ADDITION", "DELETION", "REMAINING"
  amount           Float
  allocation       BudgetAllocation @relation(fields: [allocationId], references: [id])
  allocationId     Int
}